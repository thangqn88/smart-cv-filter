@using SmartCVFilter.Web.Models
@model ApplicantResponse
@{
    ViewData["Title"] = "Applicant Details";
    Layout = "_Layout";
}

<!-- Welcome Section -->
<div class="row mb-4">
    <div class="col-12">
        <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3">
            <div>
                <h1 class="h2 mb-1 text-dark">
                    <i class="bi bi-person text-primary me-2"></i>
                    @Model.FirstName @Model.LastName
                </h1>
                <p class="text-muted mb-0">Applicant details and information</p>
            </div>
            <div class="btn-toolbar mb-2 mb-md-0">
                <div class="btn-group me-2">
                    <a href="@Url.Action("Edit", new { jobPostId = Model.JobPostId, id = Model.Id })"
                        class="btn btn-warning">
                        <i class="bi bi-pencil me-1"></i>
                        Edit
                    </a>
                    <a href="@Url.Action("Index", "Screening", new { applicantId = Model.Id })" class="btn btn-info">
                        <i class="bi bi-search me-1"></i>
                        View AI Results
                    </a>
                </div>
                <div class="btn-group">
                    <a href="@Url.Action("Index", new { jobPostId = Model.JobPostId })"
                        class="btn btn-outline-secondary">
                        <i class="bi bi-arrow-left me-1"></i>
                        Back to List
                    </a>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-lg-8">
        <!-- Personal Information -->
        <div class="card shadow-lg border-0 mb-4">
            <div class="card-header bg-white border-0 py-4">
                <h5 class="mb-1 fw-bold text-dark">
                    <i class="bi bi-person text-primary me-2"></i>
                    Personal Information
                </h5>
                <p class="text-muted mb-0">Basic candidate information</p>
            </div>
            <div class="card-body p-4">
                <div class="row g-4">
                    <div class="col-md-6">
                        <div class="d-flex align-items-center mb-3">
                            <i class="bi bi-person text-primary me-3 fs-5"></i>
                            <div>
                                <div class="text-muted small">First Name</div>
                                <div class="fw-bold text-dark">@Model.FirstName</div>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="d-flex align-items-center mb-3">
                            <i class="bi bi-person text-primary me-3 fs-5"></i>
                            <div>
                                <div class="text-muted small">Last Name</div>
                                <div class="fw-bold text-dark">@Model.LastName</div>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="d-flex align-items-center mb-3">
                            <i class="bi bi-envelope text-primary me-3 fs-5"></i>
                            <div>
                                <div class="text-muted small">Email</div>
                                <a href="mailto:@Model.Email"
                                    class="text-decoration-none fw-bold text-dark">@Model.Email</a>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="d-flex align-items-center mb-3">
                            <i class="bi bi-telephone text-primary me-3 fs-5"></i>
                            <div>
                                <div class="text-muted small">Phone</div>
                                <div class="fw-bold text-dark">@(Model.PhoneNumber ?? "Not provided")</div>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="d-flex align-items-center mb-3">
                            <i class="bi bi-gear text-primary me-3 fs-5"></i>
                            <div>
                                <div class="text-muted small">Status</div>
                                <span
                                    class="badge @(Model.Status == "Pending" ? "bg-warning" : Model.Status == "Screened" ? "bg-info" : "bg-danger") px-3 py-2">
                                    <i class="bi bi-circle-fill me-1" style="font-size: 0.5rem;"></i>
                                    @Model.Status
                                </span>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="d-flex align-items-center mb-3">
                            <i class="bi bi-calendar text-primary me-3 fs-5"></i>
                            <div>
                                <div class="text-muted small">Applied Date</div>
                                <div class="fw-bold text-dark">@Model.AppliedDate.ToString("MMM dd, yyyy 'at' h:mm tt")
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                @if (Model.LastUpdated.HasValue)
                {
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <strong>Last Updated:</strong> @Model.LastUpdated.Value.ToString("MMM dd, yyyy 'at' h:mm tt")
                        </div>
                    </div>
                }
            </div>
        </div>

        <!-- Professional Links -->
        @if (!string.IsNullOrEmpty(Model.LinkedInProfile) || !string.IsNullOrEmpty(Model.PortfolioUrl))
        {
            <div class="card shadow-lg border-0 mb-4">
                <div class="card-header bg-white border-0 py-4">
                    <h5 class="mb-1 fw-bold text-dark">
                        <i class="bi bi-link-45deg text-primary me-2"></i>
                        Professional Links
                    </h5>
                    <p class="text-muted mb-0">Professional profiles and portfolios</p>
                </div>
                <div class="card-body p-4">
                    @if (!string.IsNullOrEmpty(Model.LinkedInProfile))
                    {
                        <div class="mb-3">
                            <strong>LinkedIn:</strong>
                            <a href="@Model.LinkedInProfile" target="_blank" class="text-decoration-none">
                                @Model.LinkedInProfile
                                <i class="bi bi-box-arrow-up-right"></i>
                            </a>
                        </div>
                    }
                    @if (!string.IsNullOrEmpty(Model.PortfolioUrl))
                    {
                        <div class="mb-3">
                            <strong>Portfolio:</strong>
                            <a href="@Model.PortfolioUrl" target="_blank" class="text-decoration-none">
                                @Model.PortfolioUrl
                                <i class="bi bi-box-arrow-up-right"></i>
                            </a>
                        </div>
                    }
                </div>
            </div>
        }

        <!-- Cover Letter -->
        @if (!string.IsNullOrEmpty(Model.CoverLetter))
        {
            <div class="card shadow-lg border-0 mb-4">
                <div class="card-header bg-white border-0 py-4">
                    <h5 class="mb-1 fw-bold text-dark">
                        <i class="bi bi-file-text text-primary me-2"></i>
                        Cover Letter
                    </h5>
                    <p class="text-muted mb-0">Candidate cover letter</p>
                </div>
                <div class="card-body p-4">
                    <div class="bg-light p-4 rounded">
                        <p class="mb-0">@Model.CoverLetter</p>
                    </div>
                </div>
            </div>
        }

        <!-- CV Files -->
        <div class="card shadow-lg border-0 mb-4">
            <div class="card-header bg-white border-0 py-4">
                <h5 class="mb-1 fw-bold text-dark">
                    <i class="bi bi-file-earmark-pdf text-primary me-2"></i>
                    CV Files (@Model.CVFiles.Count)
                </h5>
                <p class="text-muted mb-0">Uploaded candidate documents</p>
            </div>
            <div class="card-body p-4">
                <!-- CV Upload Form -->
                <div class="mb-4">
                    <form asp-action="UploadCV" asp-route-jobPostId="@Model.JobPostId" asp-route-id="@Model.Id"
                        method="post" enctype="multipart/form-data" class="row g-3">
                        @Html.AntiForgeryToken()
                        <div class="col-md-8">
                            <label for="cvFile" class="form-label fw-bold">Upload New CV</label>
                            <input type="file" class="form-control" id="cvFile" name="cvFile"
                                accept=".pdf,.doc,.docx,.txt" required>
                            <div class="form-text">Supported formats: PDF, DOC, DOCX, TXT (Max 10MB)</div>
                        </div>
                        <div class="col-md-4 d-flex align-items-end">
                            <button type="submit" class="btn btn-primary">
                                <i class="bi bi-upload me-1"></i>
                                Upload CV
                            </button>
                        </div>
                    </form>
                </div>

                @if (Model.CVFiles.Any())
                {
                    <div class="table-responsive">
                        <table class="table table-hover mb-0">
                            <thead class="table-light">
                                <tr>
                                    <th class="border-0 px-4 py-3 fw-bold text-dark">File Name</th>
                                    <th class="border-0 px-4 py-3 fw-bold text-dark">Type</th>
                                    <th class="border-0 px-4 py-3 fw-bold text-dark">Size</th>
                                    <th class="border-0 px-4 py-3 fw-bold text-dark">Uploaded</th>
                                    <th class="border-0 px-4 py-3 fw-bold text-dark">Status</th>
                                    <th class="border-0 px-4 py-3 fw-bold text-dark text-center">Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var file in Model.CVFiles)
                                {
                                    <tr class="border-bottom">
                                        <td class="px-4 py-3">
                                            <div class="d-flex align-items-center">
                                                <i
                                                    class="bi @(file.FileExtension == ".pdf" ? "bi-file-earmark-pdf text-danger" : file.FileExtension == ".doc" || file.FileExtension == ".docx" ? "bi-file-earmark-word text-primary" : "bi-file-earmark-text text-info") me-2"></i>
                                                <span class="fw-bold text-dark">@file.FileName</span>
                                            </div>
                                        </td>
                                        <td class="px-4 py-3">
                                            <span class="badge bg-light text-dark">@file.FileExtension</span>
                                        </td>
                                        <td class="px-4 py-3 text-muted">@(file.FileSize / 1024) KB</td>
                                        <td class="px-4 py-3 text-muted">
                                            <i class="bi bi-calendar me-1"></i>
                                            @file.UploadedDate.ToString("MMM dd, yyyy")
                                        </td>
                                        <td class="px-4 py-3">
                                            <span
                                                class="badge @(file.Status == "Processed" ? "bg-success" : file.Status == "Processing" ? "bg-info" : file.Status == "Error" ? "bg-danger" : "bg-warning") px-3 py-2">
                                                <i class="bi bi-circle-fill me-1" style="font-size: 0.5rem;"></i>
                                                @file.Status
                                            </span>
                                        </td>
                                        <td class="px-4 py-3 text-center">
                                            <div class="btn-group" role="group">
                                                <a href="@Url.Action("DownloadCV", new { jobPostId = Model.JobPostId, id = Model.Id, cvFileId = file.Id })"
                                                    class="btn btn-outline-primary btn-sm" title="Download">
                                                    <i class="bi bi-download"></i>
                                                </a>
                                                <button type="button" class="btn btn-outline-info btn-sm"
                                                    onclick="extractText(@file.Id)" title="Extract Text">
                                                    <i class="bi bi-file-text"></i>
                                                </button>
                                                <button type="button" class="btn btn-outline-danger btn-sm"
                                                    onclick="confirmDeleteCV('@file.FileName', @file.Id)" title="Delete">
                                                    <i class="bi bi-trash"></i>
                                                </button>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
                else
                {
                    <div class="text-center py-5">
                        <i class="bi bi-file-earmark-pdf text-muted" style="font-size: 3rem;"></i>
                        <p class="text-muted mt-3">No CV files uploaded yet</p>
                    </div>
                }
            </div>
        </div>

        <!-- AI Screening Results -->
        @if (Model.ScreeningResults.Any())
        {
            <div class="card shadow-lg border-0 mb-4">
                <div class="card-header bg-white border-0 py-4">
                    <h5 class="mb-1 fw-bold text-dark">
                        <i class="bi bi-search text-primary me-2"></i>
                        AI Screening Results (@Model.ScreeningResults.Count)
                    </h5>
                    <p class="text-muted mb-0">AI-powered candidate analysis and insights</p>
                </div>
                <div class="card-body p-4">
                    @foreach (var result in Model.ScreeningResults)
                    {
                        <div class="card border-0 shadow-sm mb-4">
                            <div class="card-header bg-light border-0 py-3">
                                <div class="row align-items-center">
                                    <div class="col">
                                        <h6 class="mb-1 fw-bold text-dark">Screening Result #@result.Id</h6>
                                        <small class="text-muted">
                                            <i class="bi bi-calendar me-1"></i>
                                            Created: @result.CreatedAt.ToString("MMM dd, yyyy 'at' h:mm tt")
                                        </small>
                                    </div>
                                    <div class="col-auto">
                                        <span
                                            class="badge @(result.Status == "Completed" ? "bg-success" : "bg-warning") px-3 py-2">
                                            <i class="bi bi-circle-fill me-1" style="font-size: 0.5rem;"></i>
                                            @result.Status
                                        </span>
                                    </div>
                                </div>
                            </div>
                            <div class="card-body">
                                <div class="row">
                                    <div class="col-md-6">
                                        <strong>Overall Score:</strong>
                                        <span
                                            class="@(result.OverallScore >= 80 ? "score-excellent" : result.OverallScore >= 60 ? "score-good" : "score-poor")">
                                            @result.OverallScore/100
                                        </span>
                                    </div>
                                    <div class="col-md-6">
                                        <strong>Completed:</strong>
                                        @(result.CompletedAt?.ToString("MMM dd, yyyy 'at' h:mm tt") ?? "In Progress")
                                    </div>
                                </div>
                                <div class="mt-3">
                                    <strong>Summary:</strong>
                                    <p class="mt-2">@result.Summary</p>
                                </div>
                                <div class="row mt-3">
                                    <div class="col-md-6">
                                        <strong>Strengths:</strong>
                                        <ul class="list-unstyled mt-2">
                                            @foreach (var strength in result.Strengths)
                                            {
                                                <li><i class="bi bi-check-circle text-success"></i> @strength</li>
                                            }
                                        </ul>
                                    </div>
                                    <div class="col-md-6">
                                        <strong>Areas for Improvement:</strong>
                                        <ul class="list-unstyled mt-2">
                                            @foreach (var weakness in result.Weaknesses)
                                            {
                                                <li><i class="bi bi-exclamation-circle text-warning"></i> @weakness</li>
                                            }
                                        </ul>
                                    </div>
                                </div>
                                <div class="mt-3">
                                    <a href="@Url.Action("Details", "Screening", new { id = result.Id })"
                                        class="btn btn-sm btn-outline-primary">
                                        <i class="bi bi-eye"></i>
                                        View Detailed Analysis
                                    </a>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        }
    </div>

    <div class="col-lg-4">
        <!-- Quick Stats -->
        <div class="card shadow-lg border-0 mb-4">
            <div class="card-header bg-white border-0 py-4">
                <h5 class="mb-1 fw-bold text-dark">
                    <i class="bi bi-graph-up text-primary me-2"></i>
                    Quick Stats
                </h5>
                <p class="text-muted mb-0">Applicant statistics</p>
            </div>
            <div class="card-body p-4">
                <div class="row text-center g-3">
                    <div class="col-6">
                        <div class="border-end">
                            <h3 class="text-primary fw-bold">@Model.CVFiles.Count</h3>
                            <p class="text-muted mb-0 small">CV Files</p>
                        </div>
                    </div>
                    <div class="col-6">
                        <h3 class="text-info fw-bold">@Model.ScreeningResults.Count</h3>
                        <p class="text-muted mb-0 small">AI Results</p>
                    </div>
                </div>
            </div>
        </div>

        <!-- Job Information -->
        <div class="card shadow-lg border-0 mb-4">
            <div class="card-header bg-white border-0 py-4">
                <h5 class="mb-1 fw-bold text-dark">
                    <i class="bi bi-briefcase text-primary me-2"></i>
                    Job Information
                </h5>
                <p class="text-muted mb-0">Related job post details</p>
            </div>
            <div class="card-body p-4">
                <div class="mb-3">
                    <div class="text-muted small">Position</div>
                    <div class="fw-bold text-dark">@Model.JobTitle</div>
                </div>
                <div class="mb-3">
                    <div class="text-muted small">Job Post ID</div>
                    <div class="fw-bold text-dark">@Model.JobPostId</div>
                </div>
                <a href="@Url.Action("Details", "JobPosts", new { id = Model.JobPostId })"
                    class="btn btn-outline-primary btn-sm w-100">
                    <i class="bi bi-eye me-1"></i>
                    View Job Post
                </a>
            </div>
        </div>

        <!-- Actions -->
        <div class="card shadow-lg border-0 mb-4">
            <div class="card-header bg-white border-0 py-4">
                <h5 class="mb-1 fw-bold text-dark">
                    <i class="bi bi-lightning text-primary me-2"></i>
                    Quick Actions
                </h5>
                <p class="text-muted mb-0">Manage this applicant</p>
            </div>
            <div class="card-body p-4">
                <div class="d-grid gap-3">
                    <a href="@Url.Action("Edit", new { jobPostId = Model.JobPostId, id = Model.Id })"
                        class="btn btn-warning btn-lg">
                        <i class="bi bi-pencil me-1"></i>
                        Edit Applicant
                    </a>
                    <a href="@Url.Action("Index", "Screening", new { applicantId = Model.Id })"
                        class="btn btn-info btn-lg">
                        <i class="bi bi-search me-1"></i>
                        View AI Results
                    </a>
                    <button type="button" class="btn btn-danger btn-lg"
                        onclick="confirmDelete('@Model.FirstName @Model.LastName', () => deleteApplicant(@Model.JobPostId, @Model.Id))">
                        <i class="bi bi-trash me-1"></i>
                        Delete Applicant
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Delete Form -->
<form id="deleteForm" method="post" style="display: none;">
    @Html.AntiForgeryToken()
</form>

<!-- CV Delete Form -->
<form id="deleteCVForm" method="post" style="display: none;">
    @Html.AntiForgeryToken()
</form>

<!-- Extracted Text Modal -->
<div class="modal fade" id="extractedTextModal" tabindex="-1" aria-labelledby="extractedTextModalLabel"
    aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="extractedTextModalLabel">
                    <i class="bi bi-file-text text-primary me-2"></i>
                    Extracted Text
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div id="extractedTextContent" class="bg-light p-3 rounded"
                    style="max-height: 400px; overflow-y: auto;">
                    <!-- Extracted text will be loaded here -->
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" onclick="copyToClipboard()">
                    <i class="bi bi-clipboard me-1"></i>
                    Copy Text
                </button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        function deleteApplicant(jobPostId, applicantId) {
            const form = document.getElementById('deleteForm');
            form.action = '@Url.Action("Delete")/' + jobPostId + '/' + applicantId;
            form.submit();
        }

        function confirmDeleteCV(fileName, cvFileId) {
            if (confirm(`Are you sure you want to delete "${fileName}"? This action cannot be undone.`)) {
                deleteCV(cvFileId);
            }
        }

        function deleteCV(cvFileId) {
            const form = document.getElementById('deleteCVForm');
            form.action = '@Url.Action("DeleteCV")/' + @Model.JobPostId + '/' + @Model.Id + '/' + cvFileId;
            form.submit();
        }

        function extractText(cvFileId) {
            // Show loading state
            const modal = new bootstrap.Modal(document.getElementById('extractedTextModal'));
            document.getElementById('extractedTextContent').innerHTML = '<div class="text-center"><div class="spinner-border text-primary" role="status"><span class="visually-hidden">Loading...</span></div><p class="mt-2">Extracting text...</p></div>';
            modal.show();

            // Submit form to extract text
            const form = document.createElement('form');
            form.method = 'POST';
            form.action = '@Url.Action("ExtractText")/' + @Model.JobPostId + '/' + @Model.Id + '/' + cvFileId;

            const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
            const tokenInput = document.createElement('input');
            tokenInput.type = 'hidden';
            tokenInput.name = '__RequestVerificationToken';
            tokenInput.value = token;
            form.appendChild(tokenInput);

            document.body.appendChild(form);
            form.submit();
        }

        function copyToClipboard() {
            const textContent = document.getElementById('extractedTextContent').textContent;
            navigator.clipboard.writeText(textContent).then(function () {
                // Show success message
                const button = event.target;
                const originalText = button.innerHTML;
                button.innerHTML = '<i class="bi bi-check me-1"></i>Copied!';
                button.classList.remove('btn-primary');
                button.classList.add('btn-success');

                setTimeout(function () {
                    button.innerHTML = originalText;
                    button.classList.remove('btn-success');
                    button.classList.add('btn-primary');
                }, 2000);
            });
        }

        // Check for extracted text in TempData and display it
        @if (TempData["ExtractedText"] != null)
            {
                <text>
                    document.addEventListener('DOMContentLoaded', function() {
                        const extractedText = '@Html.Raw(TempData["ExtractedText"])';
                    document.getElementById('extractedTextContent').innerHTML = '<pre style="white-space: pre-wrap; font-family: inherit;">' + extractedText + '</pre>';
                    const modal = new bootstrap.Modal(document.getElementById('extractedTextModal'));
                    modal.show();
                    });
                </text>
        }
    </script>
}
