@using SmartCVFilter.Web.Models
@model ApplicantResponse
@{
    ViewData["Title"] = "Applicant Details";
    Layout = "_Layout";
}

<!-- Welcome Section -->
<div class="row mb-4">
    <div class="col-12">
        <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3">
            <div>
                <h1 class="h2 mb-1 text-dark">
                    <i class="bi bi-person text-primary me-2"></i>
                    @Model.FirstName @Model.LastName
                </h1>
                <p class="text-muted mb-0">Applicant details and information</p>
            </div>
            <div class="btn-toolbar mb-2 mb-md-0">
                <div class="btn-group me-2">
                    <a href="@Url.Action("Edit", new { jobPostId = Model.JobPostId, id = Model.Id })"
                        class="btn btn-warning">
                        <i class="bi bi-pencil me-1"></i>
                        Edit
                    </a>
                    <a href="@Url.Action("Index", "Screening", new { applicantId = Model.Id })" class="btn btn-info">
                        <i class="bi bi-search me-1"></i>
                        View AI Results
                    </a>
                </div>
                <div class="btn-group">
                    <a href="@Url.Action("Index", new { jobPostId = Model.JobPostId })"
                        class="btn btn-outline-secondary">
                        <i class="bi bi-arrow-left me-1"></i>
                        Back to List
                    </a>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-lg-8">
        <!-- Personal Information -->
        <div class="card shadow-lg border-0 mb-4">
            <div class="card-header bg-white border-0 py-4">
                <h5 class="mb-1 fw-bold text-dark">
                    <i class="bi bi-person text-primary me-2"></i>
                    Personal Information
                </h5>
                <p class="text-muted mb-0">Basic candidate information</p>
            </div>
            <div class="card-body p-4">
                <div class="row g-4">
                    <div class="col-md-6">
                        <div class="d-flex align-items-center mb-3">
                            <i class="bi bi-person text-primary me-3 fs-5"></i>
                            <div>
                                <div class="text-muted small">First Name</div>
                                <div class="fw-bold text-dark">@Model.FirstName</div>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="d-flex align-items-center mb-3">
                            <i class="bi bi-person text-primary me-3 fs-5"></i>
                            <div>
                                <div class="text-muted small">Last Name</div>
                                <div class="fw-bold text-dark">@Model.LastName</div>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="d-flex align-items-center mb-3">
                            <i class="bi bi-envelope text-primary me-3 fs-5"></i>
                            <div>
                                <div class="text-muted small">Email</div>
                                <a href="mailto:@Model.Email"
                                    class="text-decoration-none fw-bold text-dark">@Model.Email</a>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="d-flex align-items-center mb-3">
                            <i class="bi bi-telephone text-primary me-3 fs-5"></i>
                            <div>
                                <div class="text-muted small">Phone</div>
                                <div class="fw-bold text-dark">@(Model.PhoneNumber ?? "Not provided")</div>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="d-flex align-items-center mb-3">
                            <i class="bi bi-gear text-primary me-3 fs-5"></i>
                            <div>
                                <div class="text-muted small">Status</div>
                                <span
                                    class="badge @(Model.Status == "Pending" ? "bg-warning" : Model.Status == "Screened" ? "bg-info" : "bg-danger") px-3 py-2">
                                    <i class="bi bi-circle-fill me-1" style="font-size: 0.5rem;"></i>
                                    @Model.Status
                                </span>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="d-flex align-items-center mb-3">
                            <i class="bi bi-calendar text-primary me-3 fs-5"></i>
                            <div>
                                <div class="text-muted small">Applied Date</div>
                                <div class="fw-bold text-dark">@Model.AppliedDate.ToString("MMM dd, yyyy 'at' h:mm tt")
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                @if (Model.LastUpdated.HasValue)
                {
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <strong>Last Updated:</strong> @Model.LastUpdated.Value.ToString("MMM dd, yyyy 'at' h:mm tt")
                        </div>
                    </div>
                }
            </div>
        </div>

        <!-- Professional Links -->
        @if (!string.IsNullOrEmpty(Model.LinkedInProfile) || !string.IsNullOrEmpty(Model.PortfolioUrl))
        {
            <div class="card shadow-lg border-0 mb-4">
                <div class="card-header bg-white border-0 py-4">
                    <h5 class="mb-1 fw-bold text-dark">
                        <i class="bi bi-link-45deg text-primary me-2"></i>
                        Professional Links
                    </h5>
                    <p class="text-muted mb-0">Professional profiles and portfolios</p>
                </div>
                <div class="card-body p-4">
                    @if (!string.IsNullOrEmpty(Model.LinkedInProfile))
                    {
                        <div class="mb-3">
                            <strong>LinkedIn:</strong>
                            <a href="@Model.LinkedInProfile" target="_blank" class="text-decoration-none">
                                @Model.LinkedInProfile
                                <i class="bi bi-box-arrow-up-right"></i>
                            </a>
                        </div>
                    }
                    @if (!string.IsNullOrEmpty(Model.PortfolioUrl))
                    {
                        <div class="mb-3">
                            <strong>Portfolio:</strong>
                            <a href="@Model.PortfolioUrl" target="_blank" class="text-decoration-none">
                                @Model.PortfolioUrl
                                <i class="bi bi-box-arrow-up-right"></i>
                            </a>
                        </div>
                    }
                </div>
            </div>
        }

        <!-- Cover Letter -->
        @if (!string.IsNullOrEmpty(Model.CoverLetter))
        {
            <div class="card shadow-lg border-0 mb-4">
                <div class="card-header bg-white border-0 py-4">
                    <h5 class="mb-1 fw-bold text-dark">
                        <i class="bi bi-file-text text-primary me-2"></i>
                        Cover Letter
                    </h5>
                    <p class="text-muted mb-0">Candidate cover letter</p>
                </div>
                <div class="card-body p-4">
                    <div class="bg-light p-4 rounded">
                        <p class="mb-0">@Model.CoverLetter</p>
                    </div>
                </div>
            </div>
        }

        <!-- CV Files -->
        <div class="card shadow-lg border-0 mb-4">
            <div class="card-header bg-white border-0 py-4">
                <h5 class="mb-1 fw-bold text-dark">
                    <i class="bi bi-file-earmark-pdf text-primary me-2"></i>
                    CV Files (@Model.CVFiles.Count)
                </h5>
                <p class="text-muted mb-0">Uploaded candidate documents</p>
            </div>
            <div class="card-body p-4">
                <!-- CV Upload Form -->
                <div class="mb-4">
                    <form id="cvUploadForm" class="row g-3">
                        @Html.AntiForgeryToken()
                        <div class="col-md-8">
                            <label for="cvFile" class="form-label fw-bold">Upload New CV</label>
                            <div class="file-upload-area" id="fileUploadArea">
                                <input type="file" class="form-control" id="cvFile" name="cvFile"
                                    accept=".pdf,.doc,.docx,.txt" required style="display: none;">
                                <div id="fileUploadContent">
                                    <i class="bi bi-cloud-upload file-icon text-primary"></i>
                                    <p class="mb-2">Click to select a file or drag and drop</p>
                                    <p class="text-muted small">Supported formats: PDF, DOC, DOCX, TXT (Max 10MB)</p>
                                </div>
                                <div id="filePreview" class="file-preview" style="display: none;">
                                    <div class="file-preview-icon">
                                        <i class="bi bi-file-earmark-pdf text-danger"></i>
                                    </div>
                                    <div class="file-preview-info">
                                        <div class="file-preview-name" id="fileName"></div>
                                        <div class="file-preview-size" id="fileSize"></div>
                                    </div>
                                    <button type="button" class="btn btn-sm btn-outline-danger" onclick="clearFile()">
                                        <i class="bi bi-x"></i>
                                    </button>
                                </div>
                            </div>
                            <div id="uploadProgress" class="upload-progress mt-2" style="display: none;">
                                <div class="upload-progress-bar" id="uploadProgressBar"></div>
                            </div>
                        </div>
                        <div class="col-md-4 d-flex align-items-end gap-2">
                            <button type="submit" class="btn btn-primary" id="uploadBtn">
                                <span id="uploadBtnText">
                                    <i class="bi bi-upload me-1"></i>
                                    Upload CV
                                </span>
                                <span id="uploadBtnLoading" style="display: none;">
                                    <span class="spinner-border spinner-border-sm me-1" role="status"></span>
                                    Uploading...
                                </span>
                            </button>
                            <button type="button" class="btn btn-success" id="screeningBtn" onclick="startScreening()">
                                <span id="screeningBtnText">
                                    <i class="bi bi-search me-1"></i>
                                    Screen CV
                                </span>
                                <span id="screeningBtnLoading" style="display: none;">
                                    <span class="spinner-border spinner-border-sm me-1" role="status"></span>
                                    Processing...
                                </span>
                            </button>
                        </div>
                    </form>
                </div>

                @if (Model.CVFiles.Any())
                {
                    <div class="table-responsive">
                        <table class="table table-hover mb-0">
                            <thead class="table-light">
                                <tr>
                                    <th class="border-0 px-4 py-3 fw-bold text-dark">File Name</th>
                                    <th class="border-0 px-4 py-3 fw-bold text-dark">Type</th>
                                    <th class="border-0 px-4 py-3 fw-bold text-dark">Size</th>
                                    <th class="border-0 px-4 py-3 fw-bold text-dark">Uploaded</th>
                                    <th class="border-0 px-4 py-3 fw-bold text-dark">Status</th>
                                    <th class="border-0 px-4 py-3 fw-bold text-dark text-center">Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var file in Model.CVFiles)
                                {
                                    <tr class="border-bottom">
                                        <td class="px-4 py-3">
                                            <div class="d-flex align-items-center">
                                                <i
                                                    class="bi @(file.FileExtension == ".pdf" ? "bi-file-earmark-pdf text-danger" : file.FileExtension == ".doc" || file.FileExtension == ".docx" ? "bi-file-earmark-word text-primary" : "bi-file-earmark-text text-info") me-2"></i>
                                                <span class="fw-bold text-dark">@file.FileName</span>
                                            </div>
                                        </td>
                                        <td class="px-4 py-3">
                                            <span class="badge bg-light text-dark">@file.FileExtension</span>
                                        </td>
                                        <td class="px-4 py-3 text-muted">@(file.FileSize / 1024) KB</td>
                                        <td class="px-4 py-3 text-muted">
                                            <i class="bi bi-calendar me-1"></i>
                                            @file.UploadedDate.ToString("MMM dd, yyyy")
                                        </td>
                                        <td class="px-4 py-3">
                                            <span id="status-@file.Id"
                                                class="badge @(file.Status == "Processed" ? "bg-success" : file.Status == "Processing" ? "bg-info" : file.Status == "Error" ? "bg-danger" : "bg-warning") px-3 py-2">
                                                <i class="bi bi-circle-fill me-1" style="font-size: 0.5rem;"></i>
                                                <span id="status-text-@file.Id">@file.Status</span>
                                                @if (file.Status == "Processing")
                                                {
                                                    <span class="spinner-border spinner-border-sm ms-1" role="status"></span>
                                                }
                                            </span>
                                        </td>
                                        <td class="px-4 py-3 text-center">
                                            <div class="btn-group" role="group">
                                                <button type="button" class="btn btn-outline-primary btn-sm"
                                                    onclick="downloadCV(@file.Id)" title="Download">
                                                    <i class="bi bi-download"></i>
                                                </button>
                                                <button type="button" class="btn btn-outline-info btn-sm"
                                                    onclick="extractText(@file.Id)" title="Extract Text">
                                                    <i class="bi bi-file-text"></i>
                                                </button>
                                                <button type="button" class="btn btn-outline-danger btn-sm"
                                                    onclick="confirmDeleteCV('@file.FileName', @file.Id)" title="Delete">
                                                    <i class="bi bi-trash"></i>
                                                </button>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
                else
                {
                    <div class="text-center py-5">
                        <i class="bi bi-file-earmark-pdf text-muted" style="font-size: 3rem;"></i>
                        <p class="text-muted mt-3">No CV files uploaded yet</p>
                    </div>
                }
            </div>
        </div>

        <!-- Real-time Status Updates -->
        <div class="card shadow-lg border-0 mb-4" id="statusUpdatesCard" style="display: none;">
            <div class="card-header bg-white border-0 py-4">
                <h5 class="mb-1 fw-bold text-dark">
                    <i class="bi bi-arrow-clockwise text-primary me-2"></i>
                    Processing Status
                </h5>
                <p class="text-muted mb-0">Real-time updates for file processing</p>
            </div>
            <div class="card-body p-4">
                <div id="statusUpdatesList">
                    <!-- Status updates will be populated here -->
                </div>
            </div>
        </div>

        <!-- AI Screening Results -->
        @if (Model.ScreeningResults.Any())
        {
            <div class="card shadow-lg border-0 mb-4">
                <div class="card-header bg-white border-0 py-4">
                    <h5 class="mb-1 fw-bold text-dark">
                        <i class="bi bi-search text-primary me-2"></i>
                        AI Screening Results (@Model.ScreeningResults.Count)
                    </h5>
                    <p class="text-muted mb-0">AI-powered candidate analysis and insights</p>
                </div>
                <div class="card-body p-4">
                    @foreach (var result in Model.ScreeningResults)
                    {
                        <div class="card border-0 shadow-sm mb-4">
                            <div class="card-header bg-light border-0 py-3">
                                <div class="row align-items-center">
                                    <div class="col">
                                        <h6 class="mb-1 fw-bold text-dark">Screening Result #@result.Id</h6>
                                        <small class="text-muted">
                                            <i class="bi bi-calendar me-1"></i>
                                            Created: @result.CreatedAt.ToString("MMM dd, yyyy 'at' h:mm tt")
                                        </small>
                                    </div>
                                    <div class="col-auto">
                                        <span
                                            class="badge @(result.Status == "Completed" ? "bg-success" : "bg-warning") px-3 py-2">
                                            <i class="bi bi-circle-fill me-1" style="font-size: 0.5rem;"></i>
                                            @result.Status
                                        </span>
                                    </div>
                                </div>
                            </div>
                            <div class="card-body">
                                <div class="row">
                                    <div class="col-md-6">
                                        <strong>Overall Score:</strong>
                                        <span
                                            class="@(result.OverallScore >= 80 ? "score-excellent" : result.OverallScore >= 60 ? "score-good" : "score-poor")">
                                            @result.OverallScore/100
                                        </span>
                                    </div>
                                    <div class="col-md-6">
                                        <strong>Completed:</strong>
                                        @(result.CompletedAt?.ToString("MMM dd, yyyy 'at' h:mm tt") ?? "In Progress")
                                    </div>
                                </div>
                                <div class="mt-3">
                                    <strong>Summary:</strong>
                                    <p class="mt-2">@result.Summary</p>
                                </div>
                                <div class="row mt-3">
                                    <div class="col-md-6">
                                        <strong>Strengths:</strong>
                                        <ul class="list-unstyled mt-2">
                                            @foreach (var strength in result.Strengths)
                                            {
                                                <li><i class="bi bi-check-circle text-success"></i> @strength</li>
                                            }
                                        </ul>
                                    </div>
                                    <div class="col-md-6">
                                        <strong>Areas for Improvement:</strong>
                                        <ul class="list-unstyled mt-2">
                                            @foreach (var weakness in result.Weaknesses)
                                            {
                                                <li><i class="bi bi-exclamation-circle text-warning"></i> @weakness</li>
                                            }
                                        </ul>
                                    </div>
                                </div>
                                <div class="mt-3">
                                    <a href="@Url.Action("Details", "Screening", new { id = result.Id })"
                                        class="btn btn-sm btn-outline-primary">
                                        <i class="bi bi-eye"></i>
                                        View Detailed Analysis
                                    </a>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        }
    </div>

    <div class="col-lg-4">
        <!-- Quick Stats -->
        <div class="card shadow-lg border-0 mb-4">
            <div class="card-header bg-white border-0 py-4">
                <h5 class="mb-1 fw-bold text-dark">
                    <i class="bi bi-graph-up text-primary me-2"></i>
                    Quick Stats
                </h5>
                <p class="text-muted mb-0">Applicant statistics</p>
            </div>
            <div class="card-body p-4">
                <div class="row text-center g-3">
                    <div class="col-6">
                        <div class="border-end">
                            <h3 class="text-primary fw-bold">@Model.CVFiles.Count</h3>
                            <p class="text-muted mb-0 small">CV Files</p>
                        </div>
                    </div>
                    <div class="col-6">
                        <h3 class="text-info fw-bold">@Model.ScreeningResults.Count</h3>
                        <p class="text-muted mb-0 small">AI Results</p>
                    </div>
                </div>
            </div>
        </div>

        <!-- Job Information -->
        <div class="card shadow-lg border-0 mb-4">
            <div class="card-header bg-white border-0 py-4">
                <h5 class="mb-1 fw-bold text-dark">
                    <i class="bi bi-briefcase text-primary me-2"></i>
                    Job Information
                </h5>
                <p class="text-muted mb-0">Related job post details</p>
            </div>
            <div class="card-body p-4">
                <div class="mb-3">
                    <div class="text-muted small">Position</div>
                    <div class="fw-bold text-dark">@Model.JobTitle</div>
                </div>
                <div class="mb-3">
                    <div class="text-muted small">Job Post ID</div>
                    <div class="fw-bold text-dark">@Model.JobPostId</div>
                </div>
                <a href="@Url.Action("Details", "JobPosts", new { id = Model.JobPostId })"
                    class="btn btn-outline-primary btn-sm w-100">
                    <i class="bi bi-eye me-1"></i>
                    View Job Post
                </a>
            </div>
        </div>

        <!-- Actions -->
        <div class="card shadow-lg border-0 mb-4">
            <div class="card-header bg-white border-0 py-4">
                <h5 class="mb-1 fw-bold text-dark">
                    <i class="bi bi-lightning text-primary me-2"></i>
                    Quick Actions
                </h5>
                <p class="text-muted mb-0">Manage this applicant</p>
            </div>
            <div class="card-body p-4">
                <div class="d-grid gap-3">
                    <a href="@Url.Action("Edit", new { jobPostId = Model.JobPostId, id = Model.Id })"
                        class="btn btn-warning btn-lg">
                        <i class="bi bi-pencil me-1"></i>
                        Edit Applicant
                    </a>
                    <a href="@Url.Action("Index", "Screening", new { applicantId = Model.Id })"
                        class="btn btn-info btn-lg">
                        <i class="bi bi-search me-1"></i>
                        View AI Results
                    </a>
                    <button type="button" class="btn btn-danger btn-lg"
                        onclick="confirmDelete('@Model.FirstName @Model.LastName', () => deleteApplicant(@Model.JobPostId, @Model.Id))">
                        <i class="bi bi-trash me-1"></i>
                        Delete Applicant
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Delete Form -->
<form id="deleteForm" method="post" style="display: none;">
    @Html.AntiForgeryToken()
</form>

<!-- CV Delete Form -->
<form id="deleteCVForm" method="post" style="display: none;">
    @Html.AntiForgeryToken()
</form>

<!-- Extracted Text Modal -->
<div class="modal fade" id="extractedTextModal" tabindex="-1" aria-labelledby="extractedTextModalLabel"
    aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="extractedTextModalLabel">
                    <i class="bi bi-file-text text-primary me-2"></i>
                    Extracted Text
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div id="extractedTextContent" class="bg-light p-3 rounded"
                    style="max-height: 400px; overflow-y: auto;">
                    <!-- Extracted text will be loaded here -->
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" onclick="copyToClipboard()">
                    <i class="bi bi-clipboard me-1"></i>
                    Copy Text
                </button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Global variables for status polling
        let statusPollingInterval;
        let processingFiles = new Set();
        let statusUpdateCount = 0;

        // Initialize on page load
        document.addEventListener('DOMContentLoaded', function () {
            initializeFileUpload();
            initializeStatusPolling();
            checkForExtractedText();
            updateScreeningButtonState();
        });

        // File upload functionality
        function initializeFileUpload() {
            const fileInput = document.getElementById('cvFile');
            const fileUploadArea = document.getElementById('fileUploadArea');
            const fileUploadContent = document.getElementById('fileUploadContent');
            const filePreview = document.getElementById('filePreview');
            const uploadForm = document.getElementById('cvUploadForm');

            // Click to select file
            fileUploadArea.addEventListener('click', () => fileInput.click());

            // File selection handler
            fileInput.addEventListener('change', handleFileSelect);

            // Drag and drop handlers
            fileUploadArea.addEventListener('dragover', handleDragOver);
            fileUploadArea.addEventListener('dragleave', handleDragLeave);
            fileUploadArea.addEventListener('drop', handleDrop);

            // Form submission handler
            uploadForm.addEventListener('submit', handleFormSubmit);
        }

        function handleFileSelect(event) {
            const file = event.target.files[0];
            if (file) {
                showFilePreview(file);
            }
        }

        function handleDragOver(event) {
            event.preventDefault();
            event.currentTarget.classList.add('dragover');
        }

        function handleDragLeave(event) {
            event.currentTarget.classList.remove('dragover');
        }

        function handleDrop(event) {
            event.preventDefault();
            event.currentTarget.classList.remove('dragover');

            const files = event.dataTransfer.files;
            if (files.length > 0) {
                const fileInput = document.getElementById('cvFile');
                fileInput.files = files;
                showFilePreview(files[0]);
            }
        }

        function showFilePreview(file) {
            const fileUploadContent = document.getElementById('fileUploadContent');
            const filePreview = document.getElementById('filePreview');
            const fileName = document.getElementById('fileName');
            const fileSize = document.getElementById('fileSize');
            const fileIcon = filePreview.querySelector('.file-preview-icon i');

            // Validate file
            if (!validateFile(file)) {
                return;
            }

            // Update preview
            fileName.textContent = file.name;
            fileSize.textContent = formatFileSize(file.size);

            // Set appropriate icon
            const extension = file.name.split('.').pop().toLowerCase();
            fileIcon.className = getFileIcon(extension);

            // Show preview
            fileUploadContent.style.display = 'none';
            filePreview.style.display = 'flex';
        }

        function clearFile() {
            const fileInput = document.getElementById('cvFile');
            const fileUploadContent = document.getElementById('fileUploadContent');
            const filePreview = document.getElementById('filePreview');

            fileInput.value = '';
            fileUploadContent.style.display = 'block';
            filePreview.style.display = 'none';
        }

        function validateFile(file) {
            const allowedTypes = ['application/pdf', 'application/msword',
                'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
                'text/plain'];
            const allowedExtensions = ['.pdf', '.doc', '.docx', '.txt'];
            const maxSize = 10 * 1024 * 1024; // 10MB

            if (!allowedTypes.includes(file.type) && !allowedExtensions.some(ext => file.name.toLowerCase().endsWith(ext))) {
                showNotification('Invalid file type. Please upload PDF, DOC, DOCX, or TXT files.', 'error');
                return false;
            }

            if (file.size > maxSize) {
                showNotification('File size too large. Maximum size is 10MB.', 'error');
                return false;
            }

            return true;
        }

        function getFileIcon(extension) {
            switch (extension) {
                case 'pdf':
                    return 'bi bi-file-earmark-pdf text-danger';
                case 'doc':
                case 'docx':
                    return 'bi bi-file-earmark-word text-primary';
                case 'txt':
                    return 'bi bi-file-earmark-text text-info';
                default:
                    return 'bi bi-file-earmark text-secondary';
            }
        }

        function formatFileSize(bytes) {
            if (bytes === 0) return '0 Bytes';
            const k = 1024;
            const sizes = ['Bytes', 'KB', 'MB', 'GB'];
            const i = Math.floor(Math.log(bytes) / Math.log(k));
            return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
        }

        function handleFormSubmit(event) {
            event.preventDefault(); // Prevent default form submission

            const fileInput = document.getElementById('cvFile');
            if (!fileInput.files[0]) {
                showNotification('Please select a file to upload.', 'error');
                return;
            }

            // Show loading state
            showUploadLoading();

            // Upload file to backend API
            uploadFileToAPI(fileInput.files[0]);
        }

        async function uploadFileToAPI(file) {
            try {
                const formData = new FormData();
                formData.append('file', file);

                // Get the auth token from cookies
                const token = getCookie('auth_token_js');
                console.log('Retrieved token:', token ? 'Token found' : 'No token found');
                if (!token) {
                    showNotification('Authentication required. Please log in again.', 'error');
                    hideUploadLoading();
                    return;
                }

                const response = await fetch(`http://localhost:4000/api/applicants/@Model.Id/cvupload/upload`, {
                    method: 'POST',
                    headers: {
                        'Authorization': `Bearer ${token}`
                    },
                    body: formData
                });

                if (response.ok) {
                    const result = await response.json();
                    showNotification('CV uploaded successfully!', 'success');

                    // Clear the file input and reset the form
                    clearFile();

                    // Reload the page to show the new file
                    setTimeout(() => {
                        window.location.reload();
                    }, 1500);
                } else {
                    const errorData = await response.json().catch(() => ({ message: 'Upload failed' }));
                    showNotification(errorData.message || 'Failed to upload CV. Please try again.', 'error');
                }
            } catch (error) {
                console.error('Upload error:', error);
                showNotification('Network error. Please check your connection and try again.', 'error');
            } finally {
                hideUploadLoading();
            }
        }

        function getCookie(name) {
            const value = `; ${document.cookie}`;
            console.log('All cookies:', document.cookie);
            const parts = value.split(`; ${name}=`);
            if (parts.length === 2) {
                const token = parts.pop().split(';').shift();
                console.log(`Found cookie ${name}:`, token ? 'Token found' : 'No token');
                return token;
            }
            console.log(`Cookie ${name} not found`);
            return null;
        }

        function showUploadLoading() {
            const uploadBtn = document.getElementById('uploadBtn');
            const uploadBtnText = document.getElementById('uploadBtnText');
            const uploadBtnLoading = document.getElementById('uploadBtnLoading');
            const uploadProgress = document.getElementById('uploadProgress');
            const uploadProgressBar = document.getElementById('uploadProgressBar');

            // Disable button and show loading
            uploadBtn.disabled = true;
            uploadBtnText.style.display = 'none';
            uploadBtnLoading.style.display = 'inline';

            // Show progress bar
            uploadProgress.style.display = 'block';
            uploadProgressBar.style.width = '0%';

            // Simulate progress
            let progress = 0;
            const progressInterval = setInterval(() => {
                progress += Math.random() * 30;
                if (progress > 90) progress = 90;
                uploadProgressBar.style.width = progress + '%';
            }, 200);

            // Store interval for cleanup
            uploadBtn.dataset.progressInterval = progressInterval;
        }

        function hideUploadLoading() {
            const uploadBtn = document.getElementById('uploadBtn');
            const uploadBtnText = document.getElementById('uploadBtnText');
            const uploadBtnLoading = document.getElementById('uploadBtnLoading');
            const uploadProgress = document.getElementById('uploadProgress');
            const uploadProgressBar = document.getElementById('uploadProgressBar');

            // Clear progress interval
            if (uploadBtn.dataset.progressInterval) {
                clearInterval(uploadBtn.dataset.progressInterval);
                delete uploadBtn.dataset.progressInterval;
            }

            // Reset button
            uploadBtn.disabled = false;
            uploadBtnText.style.display = 'inline';
            uploadBtnLoading.style.display = 'none';

            // Complete progress bar
            uploadProgressBar.style.width = '100%';
            setTimeout(() => {
                uploadProgress.style.display = 'none';
                uploadProgressBar.style.width = '0%';
            }, 1000);
        }

        // Status polling for real-time updates
        function initializeStatusPolling() {
            // Check for processing files on page load
            checkProcessingFiles();

            // Start polling every 3 seconds
            statusPollingInterval = setInterval(checkProcessingFiles, 3000);
        }

        function checkProcessingFiles() {
            const statusElements = document.querySelectorAll('[id^="status-"]');
            const processingFiles = [];

            statusElements.forEach(element => {
                const fileId = element.id.replace('status-', '');
                const statusText = document.getElementById('status-text-' + fileId);
                if (statusText && (statusText.textContent === 'Uploaded' || statusText.textContent === 'Processing')) {
                    processingFiles.push(fileId);
                }
            });

            if (processingFiles.length > 0) {
                showStatusUpdatesCard();
                updateFileStatuses(processingFiles);
            } else {
                hideStatusUpdatesCard();
            }
        }

        async function updateFileStatuses(fileIds) {
            try {
                // Make API call to get real status updates
                const response = await fetch(`/Applicants/GetCVStatuses?applicantId=@Model.Id`, {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    }
                });

                if (response.ok) {
                    const statuses = await response.json();
                    statuses.forEach(status => {
                        updateFileStatus(status.Id, status.Status, status.FileName);
                    });
                } else {
                    // Fallback to simulation if API fails
                    fileIds.forEach(fileId => {
                        updateFileStatusSimulated(fileId);
                    });
                }
            } catch (error) {
                console.error('Error fetching status updates:', error);
                // Fallback to simulation
                fileIds.forEach(fileId => {
                    updateFileStatusSimulated(fileId);
                });
            }
        }

        function updateFileStatus(fileId, newStatus, fileName) {
            const statusElement = document.getElementById('status-' + fileId);
            const statusTextElement = document.getElementById('status-text-' + fileId);

            if (!statusElement || !statusTextElement) return;

            const currentStatus = statusTextElement.textContent;

            // Only update if status has changed
            if (currentStatus !== newStatus) {
                statusTextElement.textContent = newStatus;

                // Update badge color and spinner based on status
                updateStatusBadge(statusElement, statusTextElement, newStatus);

                // Add status update message
                if (newStatus === 'Uploaded') {
                    addStatusUpdate(`${fileName} uploaded successfully!`);
                } else if (newStatus === 'Processing') {
                    addStatusUpdate(`${fileName} started processing...`);
                } else if (newStatus === 'Processed') {
                    addStatusUpdate(`${fileName} processing completed!`);
                    // Update screening button state when a file is processed
                    updateScreeningButtonState();
                } else if (newStatus === 'Error') {
                    addStatusUpdate(`${fileName} processing failed.`);
                }
            }
        }

        function updateStatusBadge(statusElement, statusTextElement, status) {
            // Remove existing status classes
            statusElement.className = statusElement.className.replace(/bg-\w+/, '');

            // Add appropriate class and spinner
            switch (status) {
                case 'Uploaded':
                    statusElement.classList.add('bg-warning');
                    break;
                case 'Processing':
                    statusElement.classList.add('bg-info');
                    // Add spinner if not present
                    if (!statusElement.querySelector('.spinner-border')) {
                        const spinner = document.createElement('span');
                        spinner.className = 'spinner-border spinner-border-sm ms-1';
                        spinner.setAttribute('role', 'status');
                        statusElement.appendChild(spinner);
                    }
                    break;
                case 'Processed':
                    statusElement.classList.add('bg-success');
                    // Remove spinner
                    const spinner = statusElement.querySelector('.spinner-border');
                    if (spinner) {
                        spinner.remove();
                    }
                    break;
                case 'Error':
                    statusElement.classList.add('bg-danger');
                    // Remove spinner
                    const errorSpinner = statusElement.querySelector('.spinner-border');
                    if (errorSpinner) {
                        errorSpinner.remove();
                    }
                    break;
            }
        }

        function updateFileStatusSimulated(fileId) {
            // Fallback simulation for when API is not available
            const statusElement = document.getElementById('status-' + fileId);
            const statusTextElement = document.getElementById('status-text-' + fileId);

            if (!statusElement || !statusTextElement) return;

            const currentStatus = statusTextElement.textContent;

            if (currentStatus === 'Uploaded') {
                // Move to Processing
                statusTextElement.textContent = 'Processing';
                updateStatusBadge(statusElement, statusTextElement, 'Processing');
                addStatusUpdate(`File ${fileId} started processing...`);
            } else if (currentStatus === 'Processing') {
                // Randomly complete processing (simulate AI processing time)
                if (Math.random() > 0.7) {
                    statusTextElement.textContent = 'Processed';
                    updateStatusBadge(statusElement, statusTextElement, 'Processed');
                    addStatusUpdate(`File ${fileId} processing completed!`);
                }
            }
        }

        function showStatusUpdatesCard() {
            const card = document.getElementById('statusUpdatesCard');
            if (card) {
                card.style.display = 'block';
            }
        }

        function hideStatusUpdatesCard() {
            const card = document.getElementById('statusUpdatesCard');
            if (card) {
                card.style.display = 'none';
            }
        }

        function addStatusUpdate(message) {
            const statusList = document.getElementById('statusUpdatesList');
            if (!statusList) return;

            const updateElement = document.createElement('div');
            updateElement.className = 'alert alert-info alert-dismissible fade show';
            updateElement.innerHTML = `
                                                    <i class="bi bi-info-circle me-2"></i>
                                                    ${message}
                                                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                                                `;

            statusList.insertBefore(updateElement, statusList.firstChild);

            // Auto-remove after 5 seconds
            setTimeout(() => {
                if (updateElement.parentNode) {
                    updateElement.remove();
                }
            }, 5000);
        }

        // Other functions
        function deleteApplicant(jobPostId, applicantId) {
            const form = document.getElementById('deleteForm');
            form.action = '@Url.Action("Delete")/' + jobPostId + '/' + applicantId;
            form.submit();
        }

        function confirmDeleteCV(fileName, cvFileId) {
            if (confirm(`Are you sure you want to delete "${fileName}"? This action cannot be undone.`)) {
                deleteCV(cvFileId);
            }
        }

        async function deleteCV(cvFileId) {
            try {
                const token = getCookie('auth_token_js');
                if (!token) {
                    showNotification('Authentication required. Please log in again.', 'error');
                    return;
                }

                const response = await fetch(`http://localhost:4000/api/applicants/@Model.Id/cvupload/${cvFileId}`, {
                    method: 'DELETE',
                    headers: {
                        'Authorization': `Bearer ${token}`,
                        'Content-Type': 'application/json'
                    }
                });

                if (response.ok) {
                    showNotification('CV file deleted successfully!', 'success');
                    // Reload the page to update the file list
                    setTimeout(() => {
                        window.location.reload();
                    }, 1500);
                } else {
                    const errorData = await response.json().catch(() => ({ message: 'Delete failed' }));
                    showNotification(errorData.message || 'Failed to delete CV file.', 'error');
                }
            } catch (error) {
                console.error('Delete error:', error);
                showNotification('Network error. Please check your connection and try again.', 'error');
            }
        }

        async function extractText(cvFileId) {
            // Show loading state
            const modal = new bootstrap.Modal(document.getElementById('extractedTextModal'));
            document.getElementById('extractedTextContent').innerHTML = '<div class="text-center"><div class="spinner-border text-primary" role="status"><span class="visually-hidden">Loading...</span></div><p class="mt-2">Extracting text...</p></div>';
            modal.show();

            try {
                const token = getCookie('auth_token_js');
                if (!token) {
                    showNotification('Authentication required. Please log in again.', 'error');
                    modal.hide();
                    return;
                }

                const response = await fetch(`http://localhost:4000/api/applicants/@Model.Id/cvupload/${cvFileId}/extract-text`, {
                    method: 'POST',
                    headers: {
                        'Authorization': `Bearer ${token}`,
                        'Content-Type': 'application/json'
                    }
                });

                if (response.ok) {
                    const result = await response.json();
                    document.getElementById('extractedTextContent').innerHTML = '<pre style="white-space: pre-wrap; font-family: inherit;">' + (result.extractedText || 'No text extracted') + '</pre>';
                } else {
                    const errorData = await response.json().catch(() => ({ message: 'Extraction failed' }));
                    document.getElementById('extractedTextContent').innerHTML = '<div class="alert alert-danger">' + (errorData.message || 'Failed to extract text from CV file.') + '</div>';
                }
            } catch (error) {
                console.error('Extract text error:', error);
                document.getElementById('extractedTextContent').innerHTML = '<div class="alert alert-danger">Network error. Please check your connection and try again.</div>';
            }
        }

        async function downloadCV(cvFileId) {
            try {
                const token = getCookie('auth_token_js');
                if (!token) {
                    showNotification('Authentication required. Please log in again.', 'error');
                    return;
                }

                const response = await fetch(`http://localhost:4000/api/applicants/@Model.Id/cvupload/${cvFileId}/download`, {
                    method: 'GET',
                    headers: {
                        'Authorization': `Bearer ${token}`
                    }
                });

                if (response.ok) {
                    const blob = await response.blob();
                    const url = window.URL.createObjectURL(blob);
                    const a = document.createElement('a');
                    a.href = url;
                    a.download = `cv_file_${cvFileId}`;
                    document.body.appendChild(a);
                    a.click();
                    window.URL.revokeObjectURL(url);
                    document.body.removeChild(a);
                    showNotification('CV file downloaded successfully!', 'success');
                } else {
                    const errorData = await response.json().catch(() => ({ message: 'Download failed' }));
                    showNotification(errorData.message || 'Failed to download CV file.', 'error');
                }
            } catch (error) {
                console.error('Download error:', error);
                showNotification('Network error. Please check your connection and try again.', 'error');
            }
        }

        function copyToClipboard() {
            const textContent = document.getElementById('extractedTextContent').textContent;
            navigator.clipboard.writeText(textContent).then(function () {
                // Show success message
                const button = event.target;
                const originalText = button.innerHTML;
                button.innerHTML = '<i class="bi bi-check me-1"></i>Copied!';
                button.classList.remove('btn-primary');
                button.classList.add('btn-success');

                setTimeout(function () {
                    button.innerHTML = originalText;
                    button.classList.remove('btn-success');
                    button.classList.add('btn-primary');
                }, 2000);
            });
        }

        function checkForExtractedText() {
            @if (TempData["ExtractedText"] != null)
                {
                    <text>
                        const extractedText = '@Html.Raw(TempData["ExtractedText"])';
                        document.getElementById('extractedTextContent').innerHTML = '<pre style="white-space: pre-wrap; font-family: inherit;">' + extractedText + '</pre>';
                        const modal = new bootstrap.Modal(document.getElementById('extractedTextModal'));
                        modal.show();
                    </text>
            }
                                            }

        function showNotification(message, type = 'info') {
            // Create notification element
            const notification = document.createElement('div');
            notification.className = `alert alert-${type} alert-dismissible fade show position-fixed`;
            notification.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px;';
            notification.innerHTML = `
                                                    ${message}
                                                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                                                `;

            document.body.appendChild(notification);

            // Auto-remove after 5 seconds
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.remove();
                }
            }, 5000);
        }

        // Manual screening functionality
        async function startScreening() {
            try {
                // Show loading state
                showScreeningLoading();

                const token = getCookie('auth_token_js');
                if (!token) {
                    showNotification('Authentication required. Please log in again.', 'error');
                    hideScreeningLoading();
                    return;
                }

                // Show progress notification
                showNotification('Starting CV screening... This may take a few moments.', 'info');

                const response = await fetch(`http://localhost:4000/api/applicants/@Model.Id/cvupload/screening`, {
                    method: 'POST',
                    headers: {
                        'Authorization': `Bearer ${token}`,
                        'Content-Type': 'application/json'
                    }
                });

                if (response.ok) {
                    const result = await response.json();
                    if (result.success) {
                        showNotification('CV screening completed successfully! Results are now available.', 'success');

                        // Reload the page to show updated screening results
                        setTimeout(() => {
                            window.location.reload();
                        }, 1500);
                    } else {
                        showNotification(result.message || 'CV screening failed. Please try again.', 'error');
                    }
                } else {
                    const errorData = await response.json().catch(() => ({ message: 'Screening failed' }));
                    showNotification(errorData.message || 'Failed to start CV screening. Please try again.', 'error');
                }
            } catch (error) {
                console.error('Screening error:', error);
                showNotification('Network error. Please check your connection and try again.', 'error');
            } finally {
                hideScreeningLoading();
            }
        }

        function showScreeningLoading() {
            const screeningBtn = document.getElementById('screeningBtn');
            const screeningBtnText = document.getElementById('screeningBtnText');
            const screeningBtnLoading = document.getElementById('screeningBtnLoading');

            // Disable button and show loading
            screeningBtn.disabled = true;
            screeningBtnText.style.display = 'none';
            screeningBtnLoading.style.display = 'inline';
        }

        function hideScreeningLoading() {
            const screeningBtn = document.getElementById('screeningBtn');
            const screeningBtnText = document.getElementById('screeningBtnText');
            const screeningBtnLoading = document.getElementById('screeningBtnLoading');

            // Reset button
            screeningBtn.disabled = false;
            screeningBtnText.style.display = 'inline';
            screeningBtnLoading.style.display = 'none';
        }

        function updateScreeningButtonState() {
            const screeningBtn = document.getElementById('screeningBtn');
            const hasProcessedCV = @Model.CVFiles.Any(cf => cf.Status == "Processed").ToString().ToLower();

            if (!hasProcessedCV) {
                screeningBtn.disabled = true;
                screeningBtn.title = "Upload and process a CV first";
                screeningBtn.classList.add('opacity-50');
            } else {
                screeningBtn.disabled = false;
                screeningBtn.title = "Start AI screening for this applicant";
                screeningBtn.classList.remove('opacity-50');
            }
        }

        // Cleanup on page unload
        window.addEventListener('beforeunload', function () {
            if (statusPollingInterval) {
                clearInterval(statusPollingInterval);
            }
        });
    </script>
}
