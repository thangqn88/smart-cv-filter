@model PaginationInfo

@if (Model.TotalPages > 1)
{
    <nav aria-label="Page navigation" class="mt-4">
        <div class="d-flex justify-content-between align-items-center">
            <!-- Page Info -->
            <div class="text-muted">
                <small>
                    Showing <span class="fw-bold text-dark">@Model.StartRecord</span> to
                    <span class="fw-bold text-dark">@Model.EndRecord</span> of
                    <span class="fw-bold text-dark">@Model.TotalRecords</span> results
                </small>
            </div>

            <!-- Pagination Controls -->
            <ul class="pagination pagination-sm mb-0">
                <!-- First Page -->
                @if (Model.CurrentPage > 1)
                {
                    <li class="page-item">
                        <a class="page-link" href="@GetPageUrl(1)" aria-label="First">
                            <i class="bi bi-chevron-double-left"></i>
                        </a>
                    </li>
                }
                else
                {
                    <li class="page-item disabled">
                        <span class="page-link">
                            <i class="bi bi-chevron-double-left"></i>
                        </span>
                    </li>
                }

                <!-- Previous Page -->
                @if (Model.CurrentPage > 1)
                {
                    <li class="page-item">
                        <a class="page-link" href="@GetPageUrl(Model.CurrentPage - 1)" aria-label="Previous">
                            <i class="bi bi-chevron-left"></i>
                        </a>
                    </li>
                }
                else
                {
                    <li class="page-item disabled">
                        <span class="page-link">
                            <i class="bi bi-chevron-left"></i>
                        </span>
                    </li>
                }

                <!-- Page Numbers -->
                @{
                    int startPage = Math.Max(1, Model.CurrentPage - 2);
                    int endPage = Math.Min(Model.TotalPages, Model.CurrentPage + 2);
                }

                @if (startPage > 1)
                {
                    <li class="page-item">
                        <a class="page-link" href="@GetPageUrl(1)">1</a>
                    </li>
                    @if (startPage > 2)
                    {
                        <li class="page-item disabled">
                            <span class="page-link">...</span>
                        </li>
                    }
                }

                @for (int i = startPage; i <= endPage; i++)
                {
                    <li class="page-item @(i == Model.CurrentPage ? "active" : "")">
                        @if (i == Model.CurrentPage)
                        {
                            <span class="page-link bg-primary border-primary text-white">@i</span>
                        }
                        else
                        {
                            <a class="page-link" href="@GetPageUrl(i)">@i</a>
                        }
                    </li>
                }

                @if (endPage < Model.TotalPages)
                {
                    @if (endPage < Model.TotalPages - 1)
                    {
                        <li class="page-item disabled">
                            <span class="page-link">...</span>
                        </li>
                    }
                    <li class="page-item">
                        <a class="page-link" href="@GetPageUrl(Model.TotalPages)">@Model.TotalPages</a>
                    </li>
                }

                <!-- Next Page -->
                @if (Model.CurrentPage < Model.TotalPages)
                {
                    <li class="page-item">
                        <a class="page-link" href="@GetPageUrl(Model.CurrentPage + 1)" aria-label="Next">
                            <i class="bi bi-chevron-right"></i>
                        </a>
                    </li>
                }
                else
                {
                    <li class="page-item disabled">
                        <span class="page-link">
                            <i class="bi bi-chevron-right"></i>
                        </span>
                    </li>
                }

                <!-- Last Page -->
                @if (Model.CurrentPage < Model.TotalPages)
                {
                    <li class="page-item">
                        <a class="page-link" href="@GetPageUrl(Model.TotalPages)" aria-label="Last">
                            <i class="bi bi-chevron-double-right"></i>
                        </a>
                    </li>
                }
                else
                {
                    <li class="page-item disabled">
                        <span class="page-link">
                            <i class="bi bi-chevron-double-right"></i>
                        </span>
                    </li>
                }
            </ul>

            <!-- Page Size Selector -->
            <div class="d-flex align-items-center">
                <label class="form-label me-2 mb-0 text-muted small">Show:</label>
                <select class="form-select form-select-sm" style="width: auto;" onchange="changePageSize(this.value)">
                    <option value="10" selected="@(Model.PageSize == 10)">10</option>
                    <option value="25" selected="@(Model.PageSize == 25)">25</option>
                    <option value="50" selected="@(Model.PageSize == 50)">50</option>
                    <option value="100" selected="@(Model.PageSize == 100)">100</option>
                </select>
            </div>
        </div>
    </nav>
}

@functions {
    private string GetPageUrl(int page)
    {
        var request = ViewContext.HttpContext.Request;
        var queryString = request.QueryString;
        var queryParams = new Dictionary<string, string>();

        // Add existing query parameters
        var queryCollection = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(queryString.Value ?? "");
        foreach (var key in queryCollection.Keys)
        {
            if (key != "page" && key != "pageSize")
            {
                queryParams[key] = queryCollection[key].FirstOrDefault() ?? "";
            }
        }

        // Add page parameter
        queryParams["page"] = page.ToString();

        // Add page size parameter if it exists
        if (ViewData["PageSize"] != null)
        {
            queryParams["pageSize"] = ViewData["PageSize"].ToString();
        }

        // Build query string
        var queryStringBuilder = new System.Text.StringBuilder();
        var first = true;
        foreach (var param in queryParams)
        {
            if (!first) queryStringBuilder.Append("&");
            queryStringBuilder.Append($"{param.Key}={Uri.EscapeDataString(param.Value)}");
            first = false;
        }

        var queryStringResult = queryStringBuilder.ToString();
        return queryStringResult.Length > 0 ? $"{request.Path}?{queryStringResult}" : request.Path.ToString();
    }
}

<script>
    function changePageSize(pageSize) {
        const url = new URL(window.location);
        url.searchParams.set('pageSize', pageSize);
        url.searchParams.set('page', '1'); // Reset to first page
        window.location.href = url.toString();
    }
</script>
